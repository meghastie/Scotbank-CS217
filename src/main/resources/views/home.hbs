<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-pzjw8Z+ua/cXJhZZn5lGO9HgLC2NQ1eU9IcR8I3NVR6Ltr6UqDQ2RKB76meN5aJ" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</head>
<body>
<style>
    body{
        background: hsla(0, 12%, 91%, 1);
        background: linear-gradient(135deg, hsla(0, 12%, 91%, 1) 0%, hsla(191, 29%, 88%, 1) 51%, hsla(276, 39%, 84%, 1) 100%);
        background: -moz-linear-gradient(135deg, hsla(0, 12%, 91%, 1) 0%, hsla(191, 29%, 88%, 1) 51%, hsla(276, 39%, 84%, 1) 100%);
        background: -webkit-linear-gradient(135deg, hsla(0, 12%, 91%, 1) 0%, hsla(191, 29%, 88%, 1) 51%, hsla(276, 39%, 84%, 1) 100%);

        background-size: cover;
        text-align: center;

    }
    .carousel-control-prev, .carousel-control-next{
        text-decoration: none;
        color: black;
    }
    .carousel-control-prev:hover, .carousel-control-next:hover{
        text-decoration: none;
        color: black;
    }
    .transactionContainer{
        margin-bottom: 90px;
    }
    .balance_available{
        /* width: 30%; */
        text-align: center;
        display: flex;
        align-self: center;
        justify-content: space-around;
        margin: 0 auto;
        margin-bottom: 10px;
    }
    .display_acc_data{
        display: flex;
        justify-content: space-around;
        /* width: 40%; */
        margin: 0 auto;
        margin-top: 20px ;
        margin-bottom: 50px;
        align-items: center;
        vertical-align: middle;
    }
    .block1{
        border: 1px solid  rgba(0, 0, 0, 0.099);
        height: 270px;
        margin: auto;
        width: 50%;
        border-radius: 20px;
        background-color: rgba(0, 0, 0, 0.099);
    }
</style>
<div id="responseMessage"></div>
<div class="main">
    <div class="container text-center ">
        <div class="center-content ">
            <div>
                <img src="/assets/no_image.png" alt="no_image" height="220px" width="220px">
            </div>
            <div class="block1">
                <div class="display_acc_data">
                    <h2 style = "">Hello {{name}}</h2>
                </div>
                <!-- <p style = "font-size: 15px; margin-bottom: 30px;">accNo sortCode</p> -->
                <div class="balance_available">
                    <h4>Available Balance:</h4>
                    <h4>{{bal}}</h4>
                </div>
                <div>
                     <button type="button" class="btn btn-outline-secondary btn-lg" onclick="add_money()">Request money</button>
                    <button type="button" class="btn btn-outline-secondary btn-lg" id="submitButton">Round Up</button>
                    </a>
                </div>
            </div>


        </div>
    </div>


    <div class="transactionContainer container">
        <h2 style="margin-bottom: 30px ; margin-top: 100px;">Recent Transactions</h2>

        <div id="transactionCarousel" class="carousel slide" data-ride="carousel">
            <div class="carousel-inner">
                <div class="carousel-item container active">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Transaction 1</h5>
                            <p class="card-text">Amount: {{amount1}} Type: {{type1}}</p>


                        </div>
                    </div>
                </div>
                <div class="carousel-item container">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Transaction 2</h5>
                            <p class="card-text">Amount: {{amount2}} Type: {{type2}}</p>

                        </div>
                    </div>
                </div>
                <div class="carousel-item container">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Transaction 3</h5>
                            <p class="card-text">Amount: {{amount3}} Type: {{type3}}</p>

                        </div>
                    </div>
                </div>

                <a class="carousel-control-prev" href="#transactionCarousel" role="button" data-slide="prev">
                    <span class="carousel-control-prev-icon icon" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="carousel-control-next" href="#transactionCarousel" role="button" data-slide="next">
                    <span class="carousel-control-next-icon icon" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>
        </div>
        <div class="container" style="margin-top: 30px;">
            <button type="button" class="btn btn-outline-secondary" >See more of my transactions</button>
        </div>
    </div>

    <div class="transaction_stats container">
        <span>
            <h2>Overall Transaction Statistics</h2>
        </span>
        <canvas id="incomeSpendingChart" class="mx-auto" style=" display: block;" width="1000%" height="500px" ></canvas>

    </div>

</div>






<script>
   var nameValue = "{{name}}";
    console.log(nameValue);

function add_money(){
    var entry = prompt("How much money do you want to add?");
    // Perform the fetch request when the button is clicked
    fetch("/bank/testAddMoney", {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        body: "amount=" + encodeURIComponent(entry) + "&name=" + encodeURIComponent(nameValue)
    })
    .then(response => response.text())
    .then(data => {
        console.log(data); // Output the response from the server
    })
    .catch(error => {
        console.error("Error:", error);
    });
    console.log(entry);
}


    var paymentPromise = fetch("/bank/payments/" + encodeURIComponent(nameValue))
            .then(response => response.text())
            .catch(error => {
                console.error("Error fetching payment data:", error);
                return 0;
            });



    var withdrawPromise = fetch("/bank/withdrawals/" + encodeURIComponent(nameValue))
            .then(response => response.text())
            .catch(error => {
                console.error("Error fetching withdrawal data:", error);
                return 0;
            });

   var depositPromise = fetch("/bank/deposits/" + encodeURIComponent(nameValue))
           .then(response => response.text())
           .catch(error => {
               console.error("Error fetching deposit data:", error);
               return 0;
           });

   var transferPromise = fetch("/bank/transfers/" + encodeURIComponent(nameValue))
           .then(response => response.text())
           .catch(error => {
               console.error("Error fetching transfers to data:", error);
               return 0;
           });


   var collectRoundsPromise = fetch("/bank/collectRoundUps/" + encodeURIComponent(nameValue))
           .then(response => response.text())
           .catch(error => {
               console.error("Error fetching collected round ups data:", error);
               return 0;
           });

    // Once both promises resolve, update the chart with fetched data
    Promise.all([paymentPromise, withdrawPromise, depositPromise, transferPromise, collectRoundsPromise])
            .then(([paymentData, withdrawData, depositData, transferData, collectedRoundsData]) => {
                updateChart(paymentData, withdrawData, depositData, transferData, collectedRoundsData);
            })
            .catch(error => console.error("Error fetching data:", error));

    function updateChart(paymentData, withdrawData, depositData, transferData, collectedRoundsData) {
        console.log("Updating chart with payment data:", paymentData);
        console.log("Updating chart with income data:", withdrawData);
        console.log("Updating chart with deposit data:", depositData);
        console.log("Updating chart with transfer data:", transferData);
        console.log("Updating chart with roundUp data:", collectedRoundsData);

        // Create Chart
        var ctx = document.getElementById('incomeSpendingChart').getContext('2d');
        var myBarChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ["Total"],
                datasets: [
                    {
                        label: 'Payments',
                        backgroundColor: 'rgba(128, 0, 128, 0.5)',
                        borderColor: 'rgba(128, 0, 128, 1)',
                        borderWidth: 1,
                        data: [paymentData], // Use an array to hold outgoing data
                        barPercentage: 0.8, // Adjust as needed
                        categoryPercentage: 1.0 // Adjust as needed
                    },
                    {
                        label: 'Withdrawals',
                        backgroundColor: 'rgba(255, 105, 180, 0.5)',
                        borderColor: 'rgba(255, 105, 180, 1)',
                        borderWidth: 1,
                        data: [withdrawData], // Use an array to hold income data
                        barPercentage: 0.8, // Adjust as needed
                        categoryPercentage: 1.0 // Adjust as needed
                    },
                    {
                        label: 'Deposits',
                        backgroundColor: 'rgba(255, 218, 185, 0.5)',
                        borderColor: 'rgba(255, 218, 185, 1)',
                        borderWidth: 1,
                        data: [depositData], // Use an array to hold outgoing data
                        barPercentage: 0.8, // Adjust as needed
                        categoryPercentage: 1.0 // Adjust as needed
                    },
                    {
                        label: 'Transfers To and From Account',
                        backgroundColor: 'rgba(135, 206, 250, 0.5)',
                        borderColor: 'rgba(135, 206, 250, 1)',
                        borderWidth: 1,
                        data: [transferData], // Use an array to hold outgoing data
                        barPercentage: 0.8, // Adjust as needed
                        categoryPercentage: 1.0 // Adjust as needed
                    },
                    {
                        label: 'Collected Round-Ups',
                        backgroundColor: 'rgba(153, 50, 204, 0.5)',
                        borderColor: 'rgba(153, 50, 204, 1)',
                        borderWidth: 1,
                        data: [collectedRoundsData], // Use an array to hold outgoing data
                        barPercentage: 0.8, // Adjust as needed
                        categoryPercentage: 1.0 // Adjust as needed
                    }
                ]
            },
            options: {
                responsive: false,
                maintainAspectRatio: true,

            }
        });

    }


    var roundUpEnabled = false;

    function toggleRoundUp() {
        roundUpEnabled = !roundUpEnabled; // Toggle the status

        // Show alert based on the roundUpEnabled status
        if (roundUpEnabled) {
            alert("Round Up has been enabled");
        } else {
            alert("Round Up has been disabled");
        }
    }

// Get the button element
const button = document.getElementById("submitButton");

// Add a click event listener to the button
button.addEventListener("click", function() {
var nameValue = "{{name}}";
    // Perform the fetch request when the button is clicked
    fetch("/bank/handleButtonClick", {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        body:  "username=" + encodeURIComponent(nameValue)
    })
    .then(response => response.text())
    .then(data => {
        console.log(data); // Output the response from the server
        toggleRoundUp();
    })
    .catch(error => {
        console.error("Error:", error);
    });
});





</script>
</body>
</html>

